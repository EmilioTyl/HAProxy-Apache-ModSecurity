global
        log 127.0.0.1 local1 notice
        user haproxy
        group haproxy

defaults
        log     global
        mode    http
        option  httplog
        retries 3
        option redispatch
        timeout http-request 5s
        timeout connect  5s
        timeout client  10s
      
        # Set the maximum amount of time that the WAF server has to acknowledge the health check
        timeout server 25s

listen stats
        bind 192.168.33.15:9000
        stats enable
        
        # Hide HAPRoxy version on the stats webpage
        stats hide-version 

        # The URI of the stats page, in this case 192.168.33.15:9000/haproxy_stats
        stats uri /haproxy_stats 
        
        # Show this text in authentication popup
        stats realm HAProxy Statistics

        # Define the user:password to access the stats' page 
        stats auth admin:admin  

frontend ft_waf
        bind 192.168.33.15:80

        # Create a table with one row per IPv4. 
        # Each row contains
        #  - The number of current connection that each IPv4 currently has.
        #  - Frecuency (open tcp connections / period) over a 3s period 

        stick-table type ip size 1m expire 5m store conn_cur,conn_rate(3s)
        
        # Transport layer attacks mitigation. The protections is based on (number/opening rate) of TCP sockets
     
        # Limit number of connections per user 
        # A common user should use more than 10 conexions to load the site, this could vary depending the
        # number of .img .js .css that the site has
        
        # If the current connections of a IPv4 is greater than 10, reject the new connection
        tcp-request connection reject if { src_conn_cur ge 10 } 

        # Limit the connection rate per user
        # Reject the user if he opens more than 9 conections in 3 seconds
        tcp-request connection reject if { src_conn_rate ge 9 }

        # Increments the counter with the key src
        tcp-request connection track-sc1 src 

        # Specify the backend to use
        default_backend bk_waf

backend bk_waf
        balance roundrobin

        # When haproxy forwards a request to the WAF server, it replaces the source IP with 192.168.33.15
        # An adds a new header with the source IP, which the real client's IP
        option forwardfor header X-Client-IP
        
        # A HEAD request will be made against /waf_health_check of the different servers listed below 
        # to check if the server is up.
        option httpchk HEAD /waf_health_check HTTP/1.0

        # The expected response to WAF_SERVER_IP/waf_health_check is a 400 status code
        # If any other status code is recieved HAProxy will assume that the WAF server is down
        http-check expect status 400
 
        # - The inter <interval> parameter sets the interval between two consecutive health checks
        # - The rise <count> parameter states that a server will be considered as operational
        #   after <count> consecutive successful health checks.
        # - The fall parameter states that a server will be considered as dead after
        #   <count> consecutive unsuccessful health checks.
        default-server inter 3s rise 2 fall 3
        
        #List of WAF servers
        server waf1 192.168.33.18:81 maxconn 100 weight 10 check

frontend ft_web
        bind 192.168.33.15:81 

        # Specify the backend to use
        default_backend bk_web

backend bk_web
        balance roundrobin
        cookie SRVNAME insert
        server node1 192.168.33.16:80 cookie server-1 check
     